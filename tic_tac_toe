# Initialize the game board
board = [[' ' for _ in range(3)] for _ in range(3)]

# Define player symbols
player_symbols = ['X', 'O']

def print_board():
    # Print the current state of the game board
    for row in board:
        print(' | '.join(row))
        print('---------')

def is_board_full():
    # Check if the game board is full
    for row in board:
        if ' ' in row:
            return False
    return True

def is_winner(symbol):
    # Check if any player has won
    for i in range(3):
        # Check rows
        if board[i][0] == board[i][1] == board[i][2] == symbol:
            return True
        # Check columns
        if board[0][i] == board[1][i] == board[2][i] == symbol:
            return True
    # Check diagonals
    if board[0][0] == board[1][1] == board[2][2] == symbol:
        return True
    if board[0][2] == board[1][1] == board[2][0] == symbol:
        return True
    return False

def play_tic_tac_toe():
    print("Welcome to Tic-Tac-Toe!")
    print("Player 1: X")
    print("Player 2: O")
    print_board()

    current_player = 0
    while not is_board_full():
        # Get the current player's symbol
        symbol = player_symbols[current_player]

        # Get the current player's move
        row = int(input("Enter the row (0-2): "))
        col = int(input("Enter the column (0-2): "))

        # Check if the chosen position is valid
        if board[row][col] == ' ':
            # Update the game board
            board[row][col] = symbol
            print_board()

            # Check if the current player has won
            if is_winner(symbol):
                print(f"Player {current_player + 1} wins!")
                break

            # Switch to the next player
            current_player = (current_player + 1) % 2
        else:
            print("Invalid move. Please try again.")

    if is_board_full() and not is_winner('X') and not is_winner('O'):
        print("It's a tie!")

    print("Thank you for playing Tic-Tac-Toe!")

# Start the game
play_tic_tac_toe()
